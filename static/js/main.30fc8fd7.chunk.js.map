{"version":3,"sources":["sample-fetch.js","UseState.js","UseReducer.js","App.js","serviceWorker.js","index.js"],"names":["timeout","ms","Promise","resolve","setTimeout","confirmationName","a","sampleFetch","UseState","useState","confirmationCode","setConfirmationCode","isLoading","setIsLoading","hasError","setHasError","isPasswordCorrect","setIsPasswordCorrect","isActive","setIsActive","confirm","reset","className","style","color","value","onChange","e","currentTarget","placeholder","onClick","disabled","initialState","confirmationReducer","state","action","type","payload","UseReducer","useReducer","dispatch","isCorrect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30fc8fd7.chunk.js","sourcesContent":["function timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function sampleFetch(confirmationName) {\n  await timeout(900);\n\n  if (confirmationName === 'paradigma') return true;\n  else return false;\n}\n\nexport default sampleFetch;\n","import React, { useState, useEffect } from 'react';\nimport sampleFetch from './sample-fetch';\n\nconst UseState = () => {\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isPasswordCorrect, setIsPasswordCorrect] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n\n  const confirm = async () => {\n    setIsLoading(true);\n    setHasError(false);\n\n    const isCorrect = await sampleFetch(confirmationCode);\n    \n    if (isCorrect) {\n      setIsPasswordCorrect(true);\n    } else {\n      setIsPasswordCorrect(false);\n      setHasError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  const reset = () => {\n    setConfirmationCode('');\n    setIsLoading(false);\n    setHasError(false);\n    setIsPasswordCorrect(false);\n    setIsActive(true);\n  };\n\n  // useEffect(() => {\n  //   if (isActive) {\n  //     reset();\n  //   }\n  // }, [isActive]);\n\n  return (\n    <>\n      {isActive && (\n        <div className=\"ActiveBox\">\n          <h2 className=\"Box-title\">Eliminar UseState</h2>\n\n          {!isPasswordCorrect && (\n            <>\n              <p>\n                Por favor, escribe el código de seguridad para comprobar que quieres eliminar.\n              </p>\n\n              {isLoading && <p>Cargando...</p>}\n              {hasError && <p style={{ color: 'red' }}>Error...</p>}\n\n              <input\n                value={confirmationCode}\n                onChange={e => {\n                  setConfirmationCode(e.currentTarget.value);\n                }}\n                placeholder=\"Código de Seguridad\"\n              />\n\n              <button onClick={() => confirm()} disabled={!confirmationCode}>\n                Comprobar\n              </button>\n            </>\n          )}\n\n          {isPasswordCorrect && (\n            <>\n              <p>¿Seguro que quieres eliminar UseState?</p>\n              <button onClick={() => setIsActive(false)}>\n                Sí, eliminar\n              </button>\n              <button onClick={reset}>\n                No, volver\n              </button>\n            </>\n          )}\n        </div>\n      )}\n\n      {!isActive && (\n        <div className=\"RecoverBox\">\n          <h2 className=\"Box-title\">UseState fue eliminado</h2>\n          <button onClick={reset}>Recuperar UseState</button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default UseState;","import React, { useReducer, useEffect } from 'react';\n// import { useReducerAsync } from 'use-reducer-async';\nimport sampleFetch from './sample-fetch';\n\nconst initialState = {\n  confirmationCode: '',\n  isLoading: false,\n  hasError: false,\n  isPasswordCorrect: false,\n  isActive: true,\n};\n\nconst confirmationReducer = (state, action) => {\n  switch (action.type) {\n    case 'WRITE_CONFIRMATION_CODE': {\n      return {\n        ...state,\n        confirmationCode: action.payload,\n      };\n    }\n    case 'START_CONFIRMATION': {\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n      };\n    }\n    case 'CONFIRMATION_FAILED': {\n      return {\n        ...state,\n        isPasswordCorrect: false,\n        isLoading: false,\n        hasError: true,\n      };\n    }\n    case 'CONFIRMATION_SUCCESS': {\n      return {\n        ...state,\n        isPasswordCorrect: true,\n        isLoading: false,\n        hasError: false,\n      };\n    }\n    case 'DEACTIVATE': {\n      return {\n        ...state,\n        isActive: false,\n      };\n    }\n    case 'RESET': {\n      return { ...initialState };\n    }\n    default: return state;\n  }\n}\n\nconst UseReducer = () => {\n  const [state, dispatch] = useReducer(confirmationReducer, initialState);\n\n  const {\n    confirmationCode,\n    isLoading,\n    hasError,\n    isPasswordCorrect,\n    isActive,\n  } = state;\n\n  const confirm = async () => {\n    dispatch({ type: 'START_CONFIRMATION' });\n\n    const isCorrect = await sampleFetch(confirmationCode);\n    \n    if (isCorrect) {\n      dispatch({ type: 'CONFIRMATION_SUCCESS' });\n    } else {\n      dispatch({ type: 'CONFIRMATION_FAILED' });\n    }\n  };\n  \n  // Este efecto se puede reemplazar por el reducer de activate\n  // que en vez de ...state sea ...initialState (explicar)\n  // useEffect(() => {\n  //   if (isActive) {\n  //     dispatch({ type: 'RESET' });\n  //   }\n  // }, [isActive]);\n  \n  return (\n    <>\n      {isActive && (\n        <div className=\"ActiveBox\">\n          <h2 className=\"Box-title\">Eliminar UseReducer</h2>\n\n          {!isPasswordCorrect && (\n            <>\n              <p>\n                Por favor, escribe el código de seguridad para confirmar que quieres eliminar.\n              </p>\n\n              {isLoading && <p>Cargando...</p>}\n              {hasError && <p style={{ color: 'red' }}>Error...</p>}\n\n              <input\n                value={confirmationCode}\n                onChange={e => {\n                  dispatch({\n                    type: 'WRITE_CONFIRMATION_CODE',\n                    payload: e.currentTarget.value,\n                  })\n                }}\n                placeholder=\"Código de Seguridad\"\n              />\n\n              <button\n                onClick={confirm}\n                disabled={!confirmationCode}\n              >\n                Confirmar\n              </button>\n            </>\n          )}\n\n          {isPasswordCorrect && (\n            <>\n              <p>¿Seguro que quieres eliminar UseReducer?</p>\n              <button\n                onClick={() => {\n                  dispatch({ type: 'DEACTIVATE' });\n                }}\n              >\n                Sí, eliminar\n              </button>\n              <button\n                onClick={() => {\n                 dispatch({ type: 'RESET' });\n                }}\n              >\n                No, volver\n              </button>\n            </>\n          )}\n        </div>\n      )}\n\n      {!isActive && (\n        <div className=\"RecoverBox\">\n          <h2 className=\"Box-title\">UseState fue eliminado</h2>\n          <button\n            onClick={() => {\n              dispatch({ type: 'RESET' });\n            }}\n          >\n            Recuperar UseState\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default UseReducer;","import React from 'react';\nimport UseState from './UseState';\nimport UseReducer from './UseReducer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-section\">\n        <UseState />\n      </div>\n\n      <div className=\"App-section\">\n        <UseReducer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}